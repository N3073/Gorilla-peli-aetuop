package mesh;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.Executors;

public class Mesh implements Runnable {
    /**
     * Luo Mesh-palvelininstanssi
     * @param port Portti, jossa uusien vertaisten liittymispyyntöjä kuunnellaan
     */
	private Set<Handler> names = new HashSet<>();
	private final int port;
	private final Set<Long> tokens = new HashSet<>();

    public Mesh(int port) {
    	this.port = port;
    	 
	}
    
    private class Handler extends Thread implements Runnable {
        private String name = new Random().nextInt() + "" + new Random().nextInt();
        private final Socket socket;
        private ObjectOutputStream oOut;
        private ObjectInputStream oIn;

        public Handler(final Socket socket) throws Exception {

          	this.socket = socket;
          	/*System.out.println("tänne asti2");
          	InputStream iS = socket.getInputStream();
          	System.out.println("tänne asti3");
          	OutputStream oS = socket.getOutputStream();
          	System.out.println("tänne asti4");
      		this.oOut = new ObjectOutputStream(oS); 
      		oOut.flush();
      		System.out.println("tänne asti2");
      		this.oIn= new ObjectInputStream(iS);
        	System.out.println("tänne asti6");*/
        }
        
        public ObjectOutputStream getOutput() {
			return oOut;
        }
  
    /**
     *  Käynnistä uusien vertaisten kuuntelusäie
     */
        public void run() {
        	names.add(this);
    		System.out.println(name + " joined");
        	try {InputStream iS = socket.getInputStream();
                    OutputStream oS = socket.getOutputStream();
        			this.oOut = new ObjectOutputStream(oS);
        			this.oIn= new ObjectInputStream(iS);
        			
        		System.out.println("tähä2");
        		Scanner in = new Scanner(oIn);
        		while(true) {
        			if (in.hasNext()) {
        				ViestiLuokka p = (ViestiLuokka) oIn.readObject();
        				System.out.println(p.viesti);
        				break;
        /*				if (!tokenExists(p.getToken())) {
        	//				broadcast(p);
        				}*/
        			}
        		}in.close();
        			
        		

        	} catch (Exception e) {
        		e.printStackTrace();
            }


        }
    }
    /**
     * Lähetä hyötykuorma kaikille vastaanottajille
     * @param o Lähetettävä hyötykuorma
     */
    public void broadcast(Serializable o) {
    	System.out.println(names.size());
    	for (Handler saie : names) {
    		System.out.println(saie.name);
    		try {
    			saie.getOutput().writeObject(o);
    			saie.getOutput().flush();
    		} catch (Exception e) {
            	System.out.println(e);
    		}
    	}
	}

    /**
     * Lähetä hyötykuorma valitulle vertaiselle
     * @param o Lähetettävä hyötykuorma
     * @param recipient Vastaanottavan vertaisen tunnus
     */
    public void send(Serializable o, String recipient) {
	}

    /**
     * Sulje mesh-palvelin ja kaikki sen yhteydet 
     */
    public void close() {
	}

    /**
     * Lisää token, eli "viestitunniste"
     * Käytännössä merkkaa viestin tällä tunnisteella luetuksi
     * Määreenä private, koska tätä käyttävä luokka on sisäluokka (inner class)
     * Jos et käytä sisäluokkaa, pitää olla public
     * @param token Viestitunniste 
     */
    private void addToken(Long token) {
	}

    /**
     * Tarkista, onko viestitunniste jo olemassa
     * Määreenä private, koska tätä käyttävä luokka on sisäluokka (inner class)
     * Jos et käytä sisäluokkaa, pitää olla public
     * @param token Viestitunniste 
     */
    private boolean tokenExists(Long token) {
    	if (tokens.contains(token)) {
    		return false;
    	}
        tokens.add(token);

		return true;
	}

    /**
     * Yhdistä tämä vertainen olemassaolevaan Mesh-verkkoon
     * @param addr Solmun ip-osoite, johon yhdistetään
     * @param port Portti, jota vastapuolinen solmu kuuntelee
     */
    public void connect(InetAddress addr, int port) {
    	System.out.println("liitytään osoitteeseen " + addr);
    	new Thread(() -> liity(addr, port)).start();
	}
    
    public void liity(InetAddress addr, int port) {
    	try (
                Socket socket = new Socket(addr, port);
    			
                InputStream is = socket.getInputStream();
                OutputStream os = socket.getOutputStream();
    			ObjectOutputStream oOut = new ObjectOutputStream(os);
    			ObjectInputStream oIn= new ObjectInputStream(is);
    			
        ) {
    		
    	} catch (IOException e) {
    		System.out.println(e);
        }
    }

	public void run() {
		
		System.out.println("Starting the server..");
        var pool = Executors.newFixedThreadPool(500);
        try (var listener = new ServerSocket(port)) {
            System.out.println("Listening to port " + port + " at " + listener.getInetAddress());
            while (true) {
                pool.execute(new Handler(listener.accept()));
            }
        } catch (Exception e) {
        	System.out.println(e);
		}
	}
}
